USE STAGE

# 38,869 PRODUCTOS DISTINTOS QUE SE ENCUENTRAN EN CATALOGO
SELECT COUNT(DISTINCT PRODUCT, AISLE, DEPARTMENT) 
FROM STG_ORDERS 
WHERE ISNULL(DEPARTMENT)=0

# 219 PRODUCTOS QUE NO PROVIENEN DE CATALOGO
SELECT DISTINCT PRODUCT, AISLE, DEPARTMENT
FROM STG_ORDERS 
WHERE ISNULL(DEPARTMENT)=1
LIMIT 40000


#INSERCION CATALOGO DE PRODUCTOS A ODS
INSERT INTO ODS.ODS_PRODUCTS (PRODUCT,AISLE,DEPARTMENT,FROM_CATALOG)
(SELECT DISTINCT PRODUCT, AISLE, DEPARTMENT, TRUE
FROM STG_ORDERS 
WHERE ISNULL(DEPARTMENT)=0
)

#INSERCION PRODUCTOS NO EN CATALOGO A ODS
INSERT INTO ODS.ODS_PRODUCTS (PRODUCT,AISLE,DEPARTMENT,FROM_CATALOG)
(SELECT DISTINCT PRODUCT, AISLE, 'UNKNOWN', FALSE
FROM STG_ORDERS 
WHERE ISNULL(DEPARTMENT)=1
)



#INFO DE PEDIDOS
SELECT so.ORDER_ID, so.USER_ID, so.ORDER_NUMBER, so.ORDER_DOW, so.ORDER_HOUR_OF_DAY, p.ID , so.ADD_TO_CART_ORDER ,so.DAYS_SINCE_PRIOR_ORDER 
FROM STG_ORDERS so INNER JOIN ODS.ODS_PRODUCTS p ON so.PRODUCT = p.PRODUCT AND so.AISLE = p.AISLE 
LIMIT 10000

SELECT DISTINCT ORDER_ID FROM STAGE.STG_ORDERS
ORDER BY ORDER_ID ASC LIMIT 10000

SELECT COUNT(DISTINCT ORDER_ID) FROM STAGE.STG_ORDERS so 
#129,208 ORDENES

TRUNCATE TABLE ODS.ODS_ORDERS;



SELECT * FROM ODS_ORDERS oo WHERE ORDER_HOUR_OF_DAY < 0

START TRANSACTION; 

#Se ha encontrado que las horas del día conenían valores negativos, por lo que se corre este script para mantenerlo todo en positivo
UPDATE ODS_ORDERS SET ORDER_HOUR_OF_DAY = ABS(ORDER_HOUR_OF_DAY)
WHERE 1=1

COMMIT 



SELECT * FROM ODS.ODS_PRODUCTS op 

#USE STAGE



#INSERCION PEDIDOS A ODS
INSERT INTO ODS.ODS_ORDERS (ORDER_ID , USER_ID ,ORDER_NUMBER ,ORDER_DOW, ORDER_HOUR_OF_DAY ,PRODUCT ,ADD_TO_CART_ORDER ,DAYS_SINCE_PRIOR_ORDER )
(SELECT so.ORDER_ID, so.USER_ID, so.ORDER_NUMBER, so.ORDER_DOW, so.ORDER_HOUR_OF_DAY, p.ID , so.ADD_TO_CART_ORDER ,so.DAYS_SINCE_PRIOR_ORDER 
FROM STG_ORDERS so INNER JOIN ODS.ODS_PRODUCTS p ON so.AISLE = p.AISLE AND so.PRODUCT = p.PRODUCT 
LIMIT 200000)
#INSERCION DE 200000 LINEAS DEMORA 75M 20S


select * FROM ODS.ODS_ORDERS oo LIMIT 1000
#TRUNCATE ODS.ODS_ORDERS 

select distinct department from ODS_PRODUCTS op 



#CREANDO TABLA TEMPORAL PARA CALCULO DE PROPORCION DE PRODUCTOS POR DEPTO
#DROP TABLE IF EXISTS ODS.ODS_TMP_ORDER_DEPT
TRUNCATE TABLE ODS.ODS_TMP_ORDER_DEPT

CREATE TABLE ODS.ODS_TMP_ORDER_DEPT(
	ID INT NOT NULL AUTO_INCREMENT,
	ORDER_ID BIGINT,
	DEPARTMENT VARCHAR(252),
	DEPARTMENT_COUNT INT,
	DEPARTMENT_PERCENTAGE DECIMAL(6,3),
	PRIMARY KEY (ID)
);


#INSERTANDO CALCULO DE PRODUCTOS POR DEPARTAMENTO
INSERT INTO ODS.ODS_TMP_ORDER_DEPT (ORDER_ID, DEPARTMENT, DEPARTMENT_COUNT, DEPARTMENT_PERCENTAGE)
SELECT oo.ORDER_ID , op.DEPARTMENT, COUNT(op.DEPARTMENT), 
COUNT(op.DEPARTMENT)/(SELECT COUNT(oo1.PRODUCT) 
	FROM ODS_ORDERS oo1 WHERE oo1.ORDER_ID = oo.ORDER_ID AND oo1.USER_ID = oo.USER_ID AND oo1.ORDER_NUMBER = oo.ORDER_NUMBER )
FROM ODS_ORDERS oo INNER JOIN ODS_PRODUCTS op ON oo.PRODUCT = op.ID 
#WHERE oo.ORDER_ID = 1
GROUP BY oo.ORDER_ID, oo.USER_ID, oo.ORDER_NUMBER ,op.DEPARTMENT
LIMIT 10000

select * from ODS.ODS_TMP_ORDER_DEPT




CREATE TABLE ODS.ODS_ORDER_CLASS(
	ORDER_ID BIGINT,
	MOM_PERCENTAGE DECIMAL(6,3),
	SINGLE_PERCENTAGE DECIMAL(6,3),
	PET_FRIENDLY_PERCENTAGE DECIMAL(6,3),
	NONE_OF_THE_OTHERS BOOLEAN
);
#DROP TABLE IF EXISTS ODS.ODS_ORDER_CLASS

SELECT * FROM ODS.ODS_ORDER_CLASS ooc 


TRUNCATE TABLE ODS.ODS_ORDER_CLASS

#Classification percentages
INSERT INTO ODS.ODS_ORDER_CLASS(ORDER_ID, MOM_PERCENTAGE, SINGLE_PERCENTAGE, PET_FRIENDLY_PERCENTAGE, NONE_OF_THE_OTHERS)
select otod.ORDER_ID, 
sum(case  WHEN otod.DEPARTMENT IN ('dairy eggs','bakery', 'household' , 'babies') THEN DEPARTMENT_PERCENTAGE ELSE 0 END) AS MOM_PERCENTAGE ,
sum(case WHEN otod.DEPARTMENT IN ('canned goods','meat seafood','alcohol','snacks','beverages') THEN DEPARTMENT_PERCENTAGE ELSE 0 END) AS SINGLE_PERCENTAGE,
sum(case WHEN otod.DEPARTMENT IN ('canned goods','pets','frozen') THEN DEPARTMENT_PERCENTAGE ELSE 0 END) AS PET_FRIENDLY_PERCENTAGE,
CASE WHEN (sum(case  WHEN otod.DEPARTMENT IN ('dairy eggs','bakery', 'household' , 'babies') THEN DEPARTMENT_PERCENTAGE ELSE 0 END)) >= 0.50 THEN FALSE
	WHEN (SUM(case WHEN otod.DEPARTMENT IN ('canned goods','meat seafood','alcohol','snacks','beverages') THEN DEPARTMENT_PERCENTAGE ELSE 0 END)) >= 0.60 THEN FALSE
		WHEN (SUM(CASE WHEN otod.DEPARTMENT IN ('canned goods','pets','frozen') THEN DEPARTMENT_PERCENTAGE ELSE 0 END)) >= 0.3 THEN FALSE
			ELSE TRUE END
from ODS_TMP_ORDER_DEPT otod 
GROUP BY otod.ORDER_ID 
LIMIT 1000



#PARA CARGA A DDS
SELECT oo.ORDER_ID, oo.USER_ID, MAX(oo.ORDER_NUMBER), 
#(SELECT op1.AISLE FROM ODS.ODS_ORDERS oo1 INNER JOIN ods.ODS_PRODUCTS op1 on oo1.PRODUCT = op1.ID
#HAVING COUNT(op1.AISLE) = (select MAX(COUNT(OP2.AISLE)) FROM ODS_PRODUCTS op2 WHERE op2.ORDER_ID = oo.ODER_ID GROUP BY AISLE)  
FROM ODS.ODS_ORDERS oo 
GROUP BY oo.ORDER_ID, oo.USER_ID
LIMIT 100
